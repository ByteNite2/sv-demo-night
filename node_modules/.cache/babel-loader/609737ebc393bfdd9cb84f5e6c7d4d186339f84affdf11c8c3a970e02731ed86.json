{"ast":null,"code":"import axios from'axios';// Use Vercel API routes (will be /api/* when deployed)\nconst getApiBase=()=>{if(typeof window!=='undefined'&&window.location.hostname==='localhost'){return'http://localhost:3000/api';}return'/api';};export const fetchAccessToken=async apiKey=>{try{console.log('Calling Vercel auth API...');const response=await axios.post(\"\".concat(getApiBase(),\"/auth\"),{apiKey:apiKey.trim()});console.log('Authentication successful!');return response.data.token;}catch(error){var _error$response;console.error('Auth error:',error);// Better error message extraction\nlet errorMessage='Unknown error';if((_error$response=error.response)!==null&&_error$response!==void 0&&_error$response.data){if(typeof error.response.data.error==='string'){errorMessage=error.response.data.error;}else if(typeof error.response.data.details==='string'){errorMessage=error.response.data.details;}else if(typeof error.response.data==='string'){errorMessage=error.response.data;}else{errorMessage=JSON.stringify(error.response.data);}}else if(error.message){errorMessage=error.message;}throw new Error(\"Authentication failed: \".concat(errorMessage));}};export const createJob=async(accessToken,prompt,numReplicas)=>{try{console.log('Creating job via Vercel API...');const response=await axios.post(\"\".concat(getApiBase(),\"/create-job\"),{accessToken,prompt,numReplicas});console.log('Job created successfully!');return response.data;}catch(error){var _error$response2,_error$response2$data;console.error('Job creation error:',error);const errorMessage=((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.error)||error.message;throw new Error(\"Job creation failed: \".concat(errorMessage));}};export const runJob=async(accessToken,jobId)=>{try{console.log('Running job via Vercel API...');await axios.post(\"\".concat(getApiBase(),\"/run-job\"),{accessToken,jobId});console.log('Job started successfully!');// Wait 1 second before polling as specified in requirements\nawait new Promise(resolve=>setTimeout(resolve,1000));}catch(error){var _error$response3,_error$response3$data;console.error('Job run error:',error);const errorMessage=((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.error)||error.message;throw new Error(\"Job execution failed: \".concat(errorMessage));}};export const pollResults=async(accessToken,jobId,onProgress)=>{const maxAttempts=120;// 2 minutes max polling\nlet attempts=0;console.log(\"Starting to poll for job results: \".concat(jobId));while(attempts<maxAttempts){try{if(onProgress){onProgress(attempts+1,maxAttempts);}const response=await axios.get(\"\".concat(getApiBase(),\"/get-results?accessToken=\").concat(encodeURIComponent(accessToken),\"&jobId=\").concat(encodeURIComponent(jobId)));if(response.data.results&&response.data.results.length>0){console.log(\"\\u2705 Job completed! Found \".concat(response.data.results.length,\" results\"));return response.data.results;}console.log('Job not yet complete, continuing to poll...');}catch(error){var _error$response4,_error$response5,_error$response5$data;const status=(_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.status;const message=((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.error)||error.message;console.log(\"Polling attempt \".concat(attempts+1,\" - Status: \").concat(status,\", Message: \").concat(message));// These are expected responses while job is running\nif(status===404||status===400||status===202||message!==null&&message!==void 0&&message.includes('not yet been completed')||message!==null&&message!==void 0&&message.includes('job has not yet been completed')||message!==null&&message!==void 0&&message.includes('still processing')){console.log('Job still processing, continuing to poll...');}else{console.error(\"Unexpected error during polling:\",error);throw new Error(\"Polling failed with unexpected error: \".concat(message,\" (Status: \").concat(status,\")\"));}}await new Promise(resolve=>setTimeout(resolve,1000));attempts++;}throw new Error(\"Job results not available after \".concat(maxAttempts,\" seconds of polling. The job may still be processing.\"));};","map":{"version":3,"names":["axios","getApiBase","window","location","hostname","fetchAccessToken","apiKey","console","log","response","post","concat","trim","data","token","error","_error$response","errorMessage","details","JSON","stringify","message","Error","createJob","accessToken","prompt","numReplicas","_error$response2","_error$response2$data","runJob","jobId","Promise","resolve","setTimeout","_error$response3","_error$response3$data","pollResults","onProgress","maxAttempts","attempts","get","encodeURIComponent","results","length","_error$response4","_error$response5","_error$response5$data","status","includes"],"sources":["/Users/fabio/Coding/bytenite-git/pocs/sv-demo-night/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { AccessTokenResponse, CreateJobResponse, JobResultsResponse } from '../types';\n\n// Use Vercel API routes (will be /api/* when deployed)\nconst getApiBase = () => {\n  if (typeof window !== 'undefined' && window.location.hostname === 'localhost') {\n    return 'http://localhost:3000/api';\n  }\n  return '/api';\n};\n\nexport const fetchAccessToken = async (apiKey: string): Promise<string> => {\n  try {\n    console.log('Calling Vercel auth API...');\n    \n    const response = await axios.post<AccessTokenResponse>(`${getApiBase()}/auth`, {\n      apiKey: apiKey.trim()\n    });\n    \n    console.log('Authentication successful!');\n    return response.data.token;\n  } catch (error: any) {\n    console.error('Auth error:', error);\n    \n    // Better error message extraction\n    let errorMessage = 'Unknown error';\n    if (error.response?.data) {\n      if (typeof error.response.data.error === 'string') {\n        errorMessage = error.response.data.error;\n      } else if (typeof error.response.data.details === 'string') {\n        errorMessage = error.response.data.details;\n      } else if (typeof error.response.data === 'string') {\n        errorMessage = error.response.data;\n      } else {\n        errorMessage = JSON.stringify(error.response.data);\n      }\n    } else if (error.message) {\n      errorMessage = error.message;\n    }\n    \n    throw new Error(`Authentication failed: ${errorMessage}`);\n  }\n};\n\nexport const createJob = async (accessToken: string, prompt: string, numReplicas: number): Promise<CreateJobResponse> => {\n  try {\n    console.log('Creating job via Vercel API...');\n    \n    const response = await axios.post<CreateJobResponse>(`${getApiBase()}/create-job`, {\n      accessToken,\n      prompt,\n      numReplicas\n    });\n    \n    console.log('Job created successfully!');\n    return response.data;\n  } catch (error: any) {\n    console.error('Job creation error:', error);\n    const errorMessage = error.response?.data?.error || error.message;\n    throw new Error(`Job creation failed: ${errorMessage}`);\n  }\n};\n\nexport const runJob = async (accessToken: string, jobId: string): Promise<void> => {\n  try {\n    console.log('Running job via Vercel API...');\n    \n    await axios.post(`${getApiBase()}/run-job`, {\n      accessToken,\n      jobId\n    });\n    \n    console.log('Job started successfully!');\n    \n    // Wait 1 second before polling as specified in requirements\n    await new Promise(resolve => setTimeout(resolve, 1000));\n  } catch (error: any) {\n    console.error('Job run error:', error);\n    const errorMessage = error.response?.data?.error || error.message;\n    throw new Error(`Job execution failed: ${errorMessage}`);\n  }\n};\n\nexport const pollResults = async (\n  accessToken: string, \n  jobId: string, \n  onProgress?: (attempt: number, maxAttempts: number) => void\n): Promise<JobResultsResponse['results']> => {\n  const maxAttempts = 120; // 2 minutes max polling\n  let attempts = 0;\n\n  console.log(`Starting to poll for job results: ${jobId}`);\n\n  while (attempts < maxAttempts) {\n    try {\n      if (onProgress) {\n        onProgress(attempts + 1, maxAttempts);\n      }\n      \n      const response = await axios.get<JobResultsResponse>(\n        `${getApiBase()}/get-results?accessToken=${encodeURIComponent(accessToken)}&jobId=${encodeURIComponent(jobId)}`\n      );\n      \n      if (response.data.results && response.data.results.length > 0) {\n        console.log(`âœ… Job completed! Found ${response.data.results.length} results`);\n        return response.data.results;\n      }\n      \n      console.log('Job not yet complete, continuing to poll...');\n      \n    } catch (error: any) {\n      const status = error.response?.status;\n      const message = error.response?.data?.error || error.message;\n      \n      console.log(`Polling attempt ${attempts + 1} - Status: ${status}, Message: ${message}`);\n      \n      // These are expected responses while job is running\n      if (\n        status === 404 || \n        status === 400 || \n        status === 202 ||\n        message?.includes('not yet been completed') ||\n        message?.includes('job has not yet been completed') ||\n        message?.includes('still processing')\n      ) {\n        console.log('Job still processing, continuing to poll...');\n      } else {\n        console.error(`Unexpected error during polling:`, error);\n        throw new Error(`Polling failed with unexpected error: ${message} (Status: ${status})`);\n      }\n    }\n    \n    await new Promise(resolve => setTimeout(resolve, 1000));\n    attempts++;\n  }\n  \n  throw new Error(`Job results not available after ${maxAttempts} seconds of polling. The job may still be processing.`);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}