{"ast":null,"code":"import axios from'axios';const BASE_URL='https://api.bytenite.com/v1';const CORS_PROXY='https://cors-anywhere.herokuapp.com/';// For demo purposes, we'll use a CORS proxy\n// In production, the ByteNite API should be configured to allow your domain\nconst getProxiedUrl=url=>{// Only use proxy if we're in production (GitHub Pages)\nif(window.location.hostname==='bytenite2.github.io'){return\"\".concat(CORS_PROXY).concat(url);}return url;};export const fetchAccessToken=async apiKey=>{try{const response=await axios.post(getProxiedUrl(\"\".concat(BASE_URL,\"/auth/access_token\")),{apiKey:apiKey},{headers:{'Content-Type':'application/json','Accept':'application/json'}});return response.data.token;}catch(error){var _error$response,_error$response$data;console.error('Auth error:',error);throw new Error(\"Authentication failed: \".concat(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||error.message));}};export const createJob=async(accessToken,prompt,numReplicas)=>{try{const response=await axios.post(getProxiedUrl(\"\".concat(BASE_URL,\"/customer/jobs\")),{templateId:\"img-gen-diffusers-flux-gpu-template\",description:\"This job generates variations of images out of the same prompt using Flux Schnell.\",name:\"Job with img-gen-diffusers-flux-gpu-template\",params:{partitioner:{num_replicas:numReplicas},assembler:{},app:{prompt:prompt}}},{headers:{'Content-Type':'application/json','Accept':'application/json','Authorization':accessToken}});return response.data;}catch(error){var _error$response2,_error$response2$data;console.error('Job creation error:',error);throw new Error(\"Job creation failed: \".concat(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||error.message));}};export const runJob=async(accessToken,jobId)=>{try{await axios.post(getProxiedUrl(\"\".concat(BASE_URL,\"/customer/jobs/\").concat(jobId,\"/run\")),{config:{taskTimeout:\"3600\",jobTimeout:\"84200\",isTestJob:false}},{headers:{'Content-Type':'application/json','Accept':'application/json','Authorization':accessToken}});// Wait 1 second before polling as specified in requirements\nawait new Promise(resolve=>setTimeout(resolve,1000));}catch(error){var _error$response3,_error$response3$data;console.error('Job run error:',error);throw new Error(\"Job execution failed: \".concat(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||error.message));}};export const pollResults=async(accessToken,jobId)=>{const maxAttempts=120;// 2 minutes max polling\nlet attempts=0;while(attempts<maxAttempts){try{const response=await axios.get(getProxiedUrl(\"\".concat(BASE_URL,\"/customer/jobs/\").concat(jobId,\"/results\")),{headers:{'Accept':'application/json','Authorization':accessToken}});if(response.data.results&&response.data.results.length>0){return response.data.results;}}catch(error){var _error$response4;console.error(\"Polling attempt \".concat(attempts+1,\" failed:\"),error);// If it's a 404 or similar, the job might not be ready yet\nif(((_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.status)!==404){var _error$response5,_error$response5$data;throw new Error(\"Polling failed: \".concat(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||error.message));}}// Wait 1 second before next poll\nawait new Promise(resolve=>setTimeout(resolve,1000));attempts++;}throw new Error('Job results not available after polling timeout');};","map":{"version":3,"names":["axios","BASE_URL","CORS_PROXY","getProxiedUrl","url","window","location","hostname","concat","fetchAccessToken","apiKey","response","post","headers","data","token","error","_error$response","_error$response$data","console","Error","message","createJob","accessToken","prompt","numReplicas","templateId","description","name","params","partitioner","num_replicas","assembler","app","_error$response2","_error$response2$data","runJob","jobId","config","taskTimeout","jobTimeout","isTestJob","Promise","resolve","setTimeout","_error$response3","_error$response3$data","pollResults","maxAttempts","attempts","get","results","length","_error$response4","status","_error$response5","_error$response5$data"],"sources":["/Users/fabio/Coding/bytenite-git/pocs/sv-demo-night/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { AccessTokenResponse, CreateJobResponse, JobResultsResponse } from '../types';\n\nconst BASE_URL = 'https://api.bytenite.com/v1';\nconst CORS_PROXY = 'https://cors-anywhere.herokuapp.com/';\n\n// For demo purposes, we'll use a CORS proxy\n// In production, the ByteNite API should be configured to allow your domain\nconst getProxiedUrl = (url: string) => {\n    // Only use proxy if we're in production (GitHub Pages)\n    if (window.location.hostname === 'bytenite2.github.io') {\n        return `${CORS_PROXY}${url}`;\n    }\n    return url;\n};\n\nexport const fetchAccessToken = async (apiKey: string): Promise<string> => {\n    try {\n        const response = await axios.post<AccessTokenResponse>(\n            getProxiedUrl(`${BASE_URL}/auth/access_token`), \n            {\n                apiKey: apiKey\n            }, \n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                }\n            }\n        );\n        return response.data.token;\n    } catch (error: any) {\n        console.error('Auth error:', error);\n        throw new Error(`Authentication failed: ${error.response?.data?.message || error.message}`);\n    }\n};\n\nexport const createJob = async (accessToken: string, prompt: string, numReplicas: number): Promise<CreateJobResponse> => {\n    try {\n        const response = await axios.post<CreateJobResponse>(\n            getProxiedUrl(`${BASE_URL}/customer/jobs`), \n            {\n                templateId: \"img-gen-diffusers-flux-gpu-template\",\n                description: \"This job generates variations of images out of the same prompt using Flux Schnell.\",\n                name: \"Job with img-gen-diffusers-flux-gpu-template\",\n                params: {\n                    partitioner: {\n                        num_replicas: numReplicas\n                    },\n                    assembler: {},\n                    app: {\n                        prompt: prompt\n                    }\n                }\n            }, \n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                    'Authorization': accessToken\n                }\n            }\n        );\n        return response.data;\n    } catch (error: any) {\n        console.error('Job creation error:', error);\n        throw new Error(`Job creation failed: ${error.response?.data?.message || error.message}`);\n    }\n};\n\nexport const runJob = async (accessToken: string, jobId: string): Promise<void> => {\n    try {\n        await axios.post(\n            getProxiedUrl(`${BASE_URL}/customer/jobs/${jobId}/run`), \n            {\n                config: {\n                    taskTimeout: \"3600\",\n                    jobTimeout: \"84200\",\n                    isTestJob: false\n                }\n            }, \n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                    'Authorization': accessToken\n                }\n            }\n        );\n        \n        // Wait 1 second before polling as specified in requirements\n        await new Promise(resolve => setTimeout(resolve, 1000));\n    } catch (error: any) {\n        console.error('Job run error:', error);\n        throw new Error(`Job execution failed: ${error.response?.data?.message || error.message}`);\n    }\n};\n\nexport const pollResults = async (accessToken: string, jobId: string): Promise<JobResultsResponse['results']> => {\n    const maxAttempts = 120; // 2 minutes max polling\n    let attempts = 0;\n\n    while (attempts < maxAttempts) {\n        try {\n            const response = await axios.get<JobResultsResponse>(\n                getProxiedUrl(`${BASE_URL}/customer/jobs/${jobId}/results`), \n                {\n                    headers: {\n                        'Accept': 'application/json',\n                        'Authorization': accessToken\n                    }\n                }\n            );\n            \n            if (response.data.results && response.data.results.length > 0) {\n                return response.data.results;\n            }\n        } catch (error: any) {\n            console.error(`Polling attempt ${attempts + 1} failed:`, error);\n            // If it's a 404 or similar, the job might not be ready yet\n            if (error.response?.status !== 404) {\n                throw new Error(`Polling failed: ${error.response?.data?.message || error.message}`);\n            }\n        }\n        \n        // Wait 1 second before next poll\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        attempts++;\n    }\n    \n    throw new Error('Job results not available after polling timeout');\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAGzB,KAAM,CAAAC,QAAQ,CAAG,6BAA6B,CAC9C,KAAM,CAAAC,UAAU,CAAG,sCAAsC,CAEzD;AACA;AACA,KAAM,CAAAC,aAAa,CAAIC,GAAW,EAAK,CACnC;AACA,GAAIC,MAAM,CAACC,QAAQ,CAACC,QAAQ,GAAK,qBAAqB,CAAE,CACpD,SAAAC,MAAA,CAAUN,UAAU,EAAAM,MAAA,CAAGJ,GAAG,EAC9B,CACA,MAAO,CAAAA,GAAG,CACd,CAAC,CAED,MAAO,MAAM,CAAAK,gBAAgB,CAAG,KAAO,CAAAC,MAAc,EAAsB,CACvE,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAX,KAAK,CAACY,IAAI,CAC7BT,aAAa,IAAAK,MAAA,CAAIP,QAAQ,sBAAoB,CAAC,CAC9C,CACIS,MAAM,CAAEA,MACZ,CAAC,CACD,CACIG,OAAO,CAAE,CACL,cAAc,CAAE,kBAAkB,CAClC,QAAQ,CAAE,kBACd,CACJ,CACJ,CAAC,CACD,MAAO,CAAAF,QAAQ,CAACG,IAAI,CAACC,KAAK,CAC9B,CAAE,MAAOC,KAAU,CAAE,KAAAC,eAAA,CAAAC,oBAAA,CACjBC,OAAO,CAACH,KAAK,CAAC,aAAa,CAAEA,KAAK,CAAC,CACnC,KAAM,IAAI,CAAAI,KAAK,2BAAAZ,MAAA,CAA2B,EAAAS,eAAA,CAAAD,KAAK,CAACL,QAAQ,UAAAM,eAAA,kBAAAC,oBAAA,CAAdD,eAAA,CAAgBH,IAAI,UAAAI,oBAAA,iBAApBA,oBAAA,CAAsBG,OAAO,GAAIL,KAAK,CAACK,OAAO,CAAE,CAAC,CAC/F,CACJ,CAAC,CAED,MAAO,MAAM,CAAAC,SAAS,CAAG,KAAAA,CAAOC,WAAmB,CAAEC,MAAc,CAAEC,WAAmB,GAAiC,CACrH,GAAI,CACA,KAAM,CAAAd,QAAQ,CAAG,KAAM,CAAAX,KAAK,CAACY,IAAI,CAC7BT,aAAa,IAAAK,MAAA,CAAIP,QAAQ,kBAAgB,CAAC,CAC1C,CACIyB,UAAU,CAAE,qCAAqC,CACjDC,WAAW,CAAE,oFAAoF,CACjGC,IAAI,CAAE,8CAA8C,CACpDC,MAAM,CAAE,CACJC,WAAW,CAAE,CACTC,YAAY,CAAEN,WAClB,CAAC,CACDO,SAAS,CAAE,CAAC,CAAC,CACbC,GAAG,CAAE,CACDT,MAAM,CAAEA,MACZ,CACJ,CACJ,CAAC,CACD,CACIX,OAAO,CAAE,CACL,cAAc,CAAE,kBAAkB,CAClC,QAAQ,CAAE,kBAAkB,CAC5B,eAAe,CAAEU,WACrB,CACJ,CACJ,CAAC,CACD,MAAO,CAAAZ,QAAQ,CAACG,IAAI,CACxB,CAAE,MAAOE,KAAU,CAAE,KAAAkB,gBAAA,CAAAC,qBAAA,CACjBhB,OAAO,CAACH,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAAC,CAC3C,KAAM,IAAI,CAAAI,KAAK,yBAAAZ,MAAA,CAAyB,EAAA0B,gBAAA,CAAAlB,KAAK,CAACL,QAAQ,UAAAuB,gBAAA,kBAAAC,qBAAA,CAAdD,gBAAA,CAAgBpB,IAAI,UAAAqB,qBAAA,iBAApBA,qBAAA,CAAsBd,OAAO,GAAIL,KAAK,CAACK,OAAO,CAAE,CAAC,CAC7F,CACJ,CAAC,CAED,MAAO,MAAM,CAAAe,MAAM,CAAG,KAAAA,CAAOb,WAAmB,CAAEc,KAAa,GAAoB,CAC/E,GAAI,CACA,KAAM,CAAArC,KAAK,CAACY,IAAI,CACZT,aAAa,IAAAK,MAAA,CAAIP,QAAQ,oBAAAO,MAAA,CAAkB6B,KAAK,QAAM,CAAC,CACvD,CACIC,MAAM,CAAE,CACJC,WAAW,CAAE,MAAM,CACnBC,UAAU,CAAE,OAAO,CACnBC,SAAS,CAAE,KACf,CACJ,CAAC,CACD,CACI5B,OAAO,CAAE,CACL,cAAc,CAAE,kBAAkB,CAClC,QAAQ,CAAE,kBAAkB,CAC5B,eAAe,CAAEU,WACrB,CACJ,CACJ,CAAC,CAED;AACA,KAAM,IAAI,CAAAmB,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,IAAI,CAAC,CAAC,CAC3D,CAAE,MAAO3B,KAAU,CAAE,KAAA6B,gBAAA,CAAAC,qBAAA,CACjB3B,OAAO,CAACH,KAAK,CAAC,gBAAgB,CAAEA,KAAK,CAAC,CACtC,KAAM,IAAI,CAAAI,KAAK,0BAAAZ,MAAA,CAA0B,EAAAqC,gBAAA,CAAA7B,KAAK,CAACL,QAAQ,UAAAkC,gBAAA,kBAAAC,qBAAA,CAAdD,gBAAA,CAAgB/B,IAAI,UAAAgC,qBAAA,iBAApBA,qBAAA,CAAsBzB,OAAO,GAAIL,KAAK,CAACK,OAAO,CAAE,CAAC,CAC9F,CACJ,CAAC,CAED,MAAO,MAAM,CAAA0B,WAAW,CAAG,KAAAA,CAAOxB,WAAmB,CAAEc,KAAa,GAA6C,CAC7G,KAAM,CAAAW,WAAW,CAAG,GAAG,CAAE;AACzB,GAAI,CAAAC,QAAQ,CAAG,CAAC,CAEhB,MAAOA,QAAQ,CAAGD,WAAW,CAAE,CAC3B,GAAI,CACA,KAAM,CAAArC,QAAQ,CAAG,KAAM,CAAAX,KAAK,CAACkD,GAAG,CAC5B/C,aAAa,IAAAK,MAAA,CAAIP,QAAQ,oBAAAO,MAAA,CAAkB6B,KAAK,YAAU,CAAC,CAC3D,CACIxB,OAAO,CAAE,CACL,QAAQ,CAAE,kBAAkB,CAC5B,eAAe,CAAEU,WACrB,CACJ,CACJ,CAAC,CAED,GAAIZ,QAAQ,CAACG,IAAI,CAACqC,OAAO,EAAIxC,QAAQ,CAACG,IAAI,CAACqC,OAAO,CAACC,MAAM,CAAG,CAAC,CAAE,CAC3D,MAAO,CAAAzC,QAAQ,CAACG,IAAI,CAACqC,OAAO,CAChC,CACJ,CAAE,MAAOnC,KAAU,CAAE,KAAAqC,gBAAA,CACjBlC,OAAO,CAACH,KAAK,oBAAAR,MAAA,CAAoByC,QAAQ,CAAG,CAAC,aAAYjC,KAAK,CAAC,CAC/D;AACA,GAAI,EAAAqC,gBAAA,CAAArC,KAAK,CAACL,QAAQ,UAAA0C,gBAAA,iBAAdA,gBAAA,CAAgBC,MAAM,IAAK,GAAG,CAAE,KAAAC,gBAAA,CAAAC,qBAAA,CAChC,KAAM,IAAI,CAAApC,KAAK,oBAAAZ,MAAA,CAAoB,EAAA+C,gBAAA,CAAAvC,KAAK,CAACL,QAAQ,UAAA4C,gBAAA,kBAAAC,qBAAA,CAAdD,gBAAA,CAAgBzC,IAAI,UAAA0C,qBAAA,iBAApBA,qBAAA,CAAsBnC,OAAO,GAAIL,KAAK,CAACK,OAAO,CAAE,CAAC,CACxF,CACJ,CAEA;AACA,KAAM,IAAI,CAAAqB,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,IAAI,CAAC,CAAC,CACvDM,QAAQ,EAAE,CACd,CAEA,KAAM,IAAI,CAAA7B,KAAK,CAAC,iDAAiD,CAAC,CACtE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}