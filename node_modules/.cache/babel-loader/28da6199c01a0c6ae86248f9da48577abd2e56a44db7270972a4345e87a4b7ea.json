{"ast":null,"code":"import axios from'axios';const BASE_URL='https://api.bytenite.com/v1';// Multiple CORS proxy options\nconst CORS_PROXIES=['https://api.allorigins.win/raw?url=','https://thingproxy.freeboard.io/fetch/','https://proxy.cors.sh/','https://cors-anywhere.herokuapp.com/'];let currentProxyIndex=0;// For demo purposes, we'll use a CORS proxy\n// In production, the ByteNite API should be configured to allow your domain\nconst getProxiedUrl=url=>{// Only use proxy if we're in production (GitHub Pages)\nif(window.location.hostname==='bytenite2.github.io'){const proxy=CORS_PROXIES[currentProxyIndex];return\"\".concat(proxy).concat(encodeURIComponent(url));}return url;};const tryNextProxy=()=>{currentProxyIndex=(currentProxyIndex+1)%CORS_PROXIES.length;};export const fetchAccessToken=async apiKey=>{var _lastError$response,_lastError$response$d;const maxRetries=CORS_PROXIES.length;let lastError;for(let attempt=0;attempt<maxRetries;attempt++){try{const response=await axios.post(getProxiedUrl(\"\".concat(BASE_URL,\"/auth/access_token\")),{apiKey:apiKey},{headers:{'Content-Type':'application/json','Accept':'application/json'},timeout:10000// 10 second timeout\n});return response.data.token;}catch(error){console.error(\"Auth error with proxy \".concat(CORS_PROXIES[currentProxyIndex],\":\"),error);lastError=error;// If this isn't the last attempt, try next proxy\nif(attempt<maxRetries-1){tryNextProxy();console.log(\"Trying next proxy: \".concat(CORS_PROXIES[currentProxyIndex]));continue;}}}// If all proxies failed, throw the last error\nthrow new Error(\"Authentication failed with all CORS proxies. Last error: \".concat(((_lastError$response=lastError.response)===null||_lastError$response===void 0?void 0:(_lastError$response$d=_lastError$response.data)===null||_lastError$response$d===void 0?void 0:_lastError$response$d.message)||lastError.message));};export const createJob=async(accessToken,prompt,numReplicas)=>{try{const response=await axios.post(getProxiedUrl(\"\".concat(BASE_URL,\"/customer/jobs\")),{templateId:\"img-gen-diffusers-flux-gpu-template\",description:\"This job generates variations of images out of the same prompt using Flux Schnell.\",name:\"Job with img-gen-diffusers-flux-gpu-template\",params:{partitioner:{num_replicas:numReplicas},assembler:{},app:{prompt:prompt}}},{headers:{'Content-Type':'application/json','Accept':'application/json','Authorization':accessToken},timeout:15000// 15 second timeout\n});return response.data;}catch(error){var _error$response,_error$response$data;console.error('Job creation error:',error);throw new Error(\"Job creation failed: \".concat(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||error.message));}};export const runJob=async(accessToken,jobId)=>{try{await axios.post(getProxiedUrl(\"\".concat(BASE_URL,\"/customer/jobs/\").concat(jobId,\"/run\")),{config:{taskTimeout:\"3600\",jobTimeout:\"84200\",isTestJob:false}},{headers:{'Content-Type':'application/json','Accept':'application/json','Authorization':accessToken},timeout:15000// 15 second timeout\n});// Wait 1 second before polling as specified in requirements\nawait new Promise(resolve=>setTimeout(resolve,1000));}catch(error){var _error$response2,_error$response2$data;console.error('Job run error:',error);throw new Error(\"Job execution failed: \".concat(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||error.message));}};export const pollResults=async(accessToken,jobId)=>{const maxAttempts=120;// 2 minutes max polling\nlet attempts=0;while(attempts<maxAttempts){try{const response=await axios.get(getProxiedUrl(\"\".concat(BASE_URL,\"/customer/jobs/\").concat(jobId,\"/results\")),{headers:{'Accept':'application/json','Authorization':accessToken},timeout:10000// 10 second timeout\n});if(response.data.results&&response.data.results.length>0){return response.data.results;}}catch(error){var _error$response3;console.error(\"Polling attempt \".concat(attempts+1,\" failed:\"),error);// If it's a 404 or similar, the job might not be ready yet\nif(((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status)!==404){var _error$response4,_error$response4$data;throw new Error(\"Polling failed: \".concat(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||error.message));}}// Wait 1 second before next poll\nawait new Promise(resolve=>setTimeout(resolve,1000));attempts++;}throw new Error('Job results not available after polling timeout');};","map":{"version":3,"names":["axios","BASE_URL","CORS_PROXIES","currentProxyIndex","getProxiedUrl","url","window","location","hostname","proxy","concat","encodeURIComponent","tryNextProxy","length","fetchAccessToken","apiKey","_lastError$response","_lastError$response$d","maxRetries","lastError","attempt","response","post","headers","timeout","data","token","error","console","log","Error","message","createJob","accessToken","prompt","numReplicas","templateId","description","name","params","partitioner","num_replicas","assembler","app","_error$response","_error$response$data","runJob","jobId","config","taskTimeout","jobTimeout","isTestJob","Promise","resolve","setTimeout","_error$response2","_error$response2$data","pollResults","maxAttempts","attempts","get","results","_error$response3","status","_error$response4","_error$response4$data"],"sources":["/Users/fabio/Coding/bytenite-git/pocs/sv-demo-night/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { AccessTokenResponse, CreateJobResponse, JobResultsResponse } from '../types';\n\nconst BASE_URL = 'https://api.bytenite.com/v1';\n\n// Multiple CORS proxy options\nconst CORS_PROXIES = [\n    'https://api.allorigins.win/raw?url=',\n    'https://thingproxy.freeboard.io/fetch/',\n    'https://proxy.cors.sh/',\n    'https://cors-anywhere.herokuapp.com/'\n];\n\nlet currentProxyIndex = 0;\n\n// For demo purposes, we'll use a CORS proxy\n// In production, the ByteNite API should be configured to allow your domain\nconst getProxiedUrl = (url: string) => {\n    // Only use proxy if we're in production (GitHub Pages)\n    if (window.location.hostname === 'bytenite2.github.io') {\n        const proxy = CORS_PROXIES[currentProxyIndex];\n        return `${proxy}${encodeURIComponent(url)}`;\n    }\n    return url;\n};\n\nconst tryNextProxy = () => {\n    currentProxyIndex = (currentProxyIndex + 1) % CORS_PROXIES.length;\n};\n\nexport const fetchAccessToken = async (apiKey: string): Promise<string> => {\n    const maxRetries = CORS_PROXIES.length;\n    let lastError: any;\n\n    for (let attempt = 0; attempt < maxRetries; attempt++) {\n        try {\n            const response = await axios.post<AccessTokenResponse>(\n                getProxiedUrl(`${BASE_URL}/auth/access_token`), \n                {\n                    apiKey: apiKey\n                }, \n                {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    },\n                    timeout: 10000 // 10 second timeout\n                }\n            );\n            return response.data.token;\n        } catch (error: any) {\n            console.error(`Auth error with proxy ${CORS_PROXIES[currentProxyIndex]}:`, error);\n            lastError = error;\n            \n            // If this isn't the last attempt, try next proxy\n            if (attempt < maxRetries - 1) {\n                tryNextProxy();\n                console.log(`Trying next proxy: ${CORS_PROXIES[currentProxyIndex]}`);\n                continue;\n            }\n        }\n    }\n    \n    // If all proxies failed, throw the last error\n    throw new Error(`Authentication failed with all CORS proxies. Last error: ${lastError.response?.data?.message || lastError.message}`);\n};\n\nexport const createJob = async (accessToken: string, prompt: string, numReplicas: number): Promise<CreateJobResponse> => {\n    try {\n        const response = await axios.post<CreateJobResponse>(\n            getProxiedUrl(`${BASE_URL}/customer/jobs`), \n            {\n                templateId: \"img-gen-diffusers-flux-gpu-template\",\n                description: \"This job generates variations of images out of the same prompt using Flux Schnell.\",\n                name: \"Job with img-gen-diffusers-flux-gpu-template\",\n                params: {\n                    partitioner: {\n                        num_replicas: numReplicas\n                    },\n                    assembler: {},\n                    app: {\n                        prompt: prompt\n                    }\n                }\n            }, \n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                    'Authorization': accessToken\n                },\n                timeout: 15000 // 15 second timeout\n            }\n        );\n        return response.data;\n    } catch (error: any) {\n        console.error('Job creation error:', error);\n        throw new Error(`Job creation failed: ${error.response?.data?.message || error.message}`);\n    }\n};\n\nexport const runJob = async (accessToken: string, jobId: string): Promise<void> => {\n    try {\n        await axios.post(\n            getProxiedUrl(`${BASE_URL}/customer/jobs/${jobId}/run`), \n            {\n                config: {\n                    taskTimeout: \"3600\",\n                    jobTimeout: \"84200\",\n                    isTestJob: false\n                }\n            }, \n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                    'Authorization': accessToken\n                },\n                timeout: 15000 // 15 second timeout\n            }\n        );\n        \n        // Wait 1 second before polling as specified in requirements\n        await new Promise(resolve => setTimeout(resolve, 1000));\n    } catch (error: any) {\n        console.error('Job run error:', error);\n        throw new Error(`Job execution failed: ${error.response?.data?.message || error.message}`);\n    }\n};\n\nexport const pollResults = async (accessToken: string, jobId: string): Promise<JobResultsResponse['results']> => {\n    const maxAttempts = 120; // 2 minutes max polling\n    let attempts = 0;\n\n    while (attempts < maxAttempts) {\n        try {\n            const response = await axios.get<JobResultsResponse>(\n                getProxiedUrl(`${BASE_URL}/customer/jobs/${jobId}/results`), \n                {\n                    headers: {\n                        'Accept': 'application/json',\n                        'Authorization': accessToken\n                    },\n                    timeout: 10000 // 10 second timeout\n                }\n            );\n            \n            if (response.data.results && response.data.results.length > 0) {\n                return response.data.results;\n            }\n        } catch (error: any) {\n            console.error(`Polling attempt ${attempts + 1} failed:`, error);\n            // If it's a 404 or similar, the job might not be ready yet\n            if (error.response?.status !== 404) {\n                throw new Error(`Polling failed: ${error.response?.data?.message || error.message}`);\n            }\n        }\n        \n        // Wait 1 second before next poll\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        attempts++;\n    }\n    \n    throw new Error('Job results not available after polling timeout');\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}