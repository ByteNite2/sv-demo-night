{"ast":null,"code":"import axios from'axios';const BASE_URL='https://api.bytenite.com/v1';export const fetchAccessToken=async apiKey=>{const response=await axios.post(\"\".concat(BASE_URL,\"/auth/access_token\"),{apiKey:apiKey},{headers:{'Content-Type':'application/json','Accept':'application/json'}});return response.data.token;};export const createJob=async(accessToken,prompt,numReplicas)=>{const response=await axios.post(\"\".concat(BASE_URL,\"/customer/jobs\"),{templateId:\"img-gen-diffusers-flux-gpu-template\",description:\"This job generates variations of images out of the same prompt using Flux Schnell.\",name:\"Job with img-gen-diffusers-flux-gpu-template\",params:{partitioner:{num_replicas:numReplicas},assembler:{},app:{prompt:prompt}}},{headers:{'Content-Type':'application/json','Accept':'application/json','Authorization':accessToken}});return response.data;};export const runJob=async(accessToken,jobId)=>{await axios.post(\"\".concat(BASE_URL,\"/customer/jobs/\").concat(jobId,\"/run\"),{config:{taskTimeout:\"3600\",jobTimeout:\"84200\",isTestJob:false}},{headers:{'Content-Type':'application/json','Accept':'application/json','Authorization':accessToken}});// Wait 1 second before polling as specified in requirements\nawait new Promise(resolve=>setTimeout(resolve,1000));};export const pollResults=async(accessToken,jobId)=>{const maxAttempts=120;// 2 minutes max polling\nlet attempts=0;while(attempts<maxAttempts){try{const response=await axios.get(\"\".concat(BASE_URL,\"/customer/jobs/\").concat(jobId,\"/results\"),{headers:{'Accept':'application/json','Authorization':accessToken}});if(response.data.results&&response.data.results.length>0){return response.data.results;}}catch(error){var _error$response;// If it's a 404 or similar, the job might not be ready yet\nif(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)!==404){throw error;}}// Wait 1 second before next poll\nawait new Promise(resolve=>setTimeout(resolve,1000));attempts++;}throw new Error('Job results not available after polling timeout');};","map":{"version":3,"names":["axios","BASE_URL","fetchAccessToken","apiKey","response","post","concat","headers","data","token","createJob","accessToken","prompt","numReplicas","templateId","description","name","params","partitioner","num_replicas","assembler","app","runJob","jobId","config","taskTimeout","jobTimeout","isTestJob","Promise","resolve","setTimeout","pollResults","maxAttempts","attempts","get","results","length","error","_error$response","status","Error"],"sources":["/Users/fabio/Coding/bytenite-git/pocs/sv-demo-night/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { AccessTokenResponse, CreateJobResponse, JobResultsResponse } from '../types';\n\nconst BASE_URL = 'https://api.bytenite.com/v1';\n\nexport const fetchAccessToken = async (apiKey: string): Promise<string> => {\n    const response = await axios.post<AccessTokenResponse>(`${BASE_URL}/auth/access_token`, {\n        apiKey: apiKey\n    }, {\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        }\n    });\n    return response.data.token;\n};\n\nexport const createJob = async (accessToken: string, prompt: string, numReplicas: number): Promise<CreateJobResponse> => {\n    const response = await axios.post<CreateJobResponse>(`${BASE_URL}/customer/jobs`, {\n        templateId: \"img-gen-diffusers-flux-gpu-template\",\n        description: \"This job generates variations of images out of the same prompt using Flux Schnell.\",\n        name: \"Job with img-gen-diffusers-flux-gpu-template\",\n        params: {\n            partitioner: {\n                num_replicas: numReplicas\n            },\n            assembler: {},\n            app: {\n                prompt: prompt\n            }\n        }\n    }, {\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            'Authorization': accessToken\n        }\n    });\n    return response.data;\n};\n\nexport const runJob = async (accessToken: string, jobId: string): Promise<void> => {\n    await axios.post(`${BASE_URL}/customer/jobs/${jobId}/run`, {\n        config: {\n            taskTimeout: \"3600\",\n            jobTimeout: \"84200\",\n            isTestJob: false\n        }\n    }, {\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            'Authorization': accessToken\n        }\n    });\n    \n    // Wait 1 second before polling as specified in requirements\n    await new Promise(resolve => setTimeout(resolve, 1000));\n};\n\nexport const pollResults = async (accessToken: string, jobId: string): Promise<JobResultsResponse['results']> => {\n    const maxAttempts = 120; // 2 minutes max polling\n    let attempts = 0;\n\n    while (attempts < maxAttempts) {\n        try {\n            const response = await axios.get<JobResultsResponse>(`${BASE_URL}/customer/jobs/${jobId}/results`, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Authorization': accessToken\n                }\n            });\n            \n            if (response.data.results && response.data.results.length > 0) {\n                return response.data.results;\n            }\n        } catch (error: any) {\n            // If it's a 404 or similar, the job might not be ready yet\n            if (error.response?.status !== 404) {\n                throw error;\n            }\n        }\n        \n        // Wait 1 second before next poll\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        attempts++;\n    }\n    \n    throw new Error('Job results not available after polling timeout');\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}