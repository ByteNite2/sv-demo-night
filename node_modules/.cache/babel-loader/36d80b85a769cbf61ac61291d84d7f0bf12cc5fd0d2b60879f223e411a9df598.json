{"ast":null,"code":"import React,{useState}from'react';import{fetchAccessToken,createJob,runJob,pollResults}from'../services/api';import LoadingSpinner from'./LoadingSpinner';import ImageGallery from'./ImageGallery';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ImageGenerator=()=>{const[prompt,setPrompt]=useState('');const[numReplicas,setNumReplicas]=useState(1);const[apiKey,setApiKey]=useState('');const[loading,setLoading]=useState(false);const[images,setImages]=useState([]);const[error,setError]=useState(null);const[loadingStatus,setLoadingStatus]=useState('');const[debugInfo,setDebugInfo]=useState('');// Check if we're using CORS proxy\nconst isUsingProxy=window.location.hostname==='bytenite2.github.io';const handleGenerate=async()=>{if(!prompt.trim()){setError('Please enter a prompt');return;}if(!apiKey.trim()){setError('Please enter your API key');return;}// Clear debug info and show API key info\nsetDebugInfo(\"API Key info: Length=\".concat(apiKey.length,\", Starts with: \").concat(apiKey.substring(0,8),\"...\"));setLoading(true);setError(null);setImages([]);try{setLoadingStatus('Authenticating...');setDebugInfo(prev=>prev+'\\nAttempting authentication...');const accessToken=await fetchAccessToken(apiKey);setDebugInfo(prev=>prev+'\\n✅ Authentication successful!');setLoadingStatus('Creating job...');const jobData=await createJob(accessToken,prompt,numReplicas);const jobId=jobData.job.id;setDebugInfo(prev=>prev+\"\\n\\u2705 Job created with ID: \".concat(jobId));setLoadingStatus('Starting generation...');await runJob(accessToken,jobId);setDebugInfo(prev=>prev+'\\n✅ Job started successfully');setLoadingStatus('Generating images...');const results=await pollResults(accessToken,jobId);if(results&&results.length>0){// For now, we'll just use the download links directly\n// In a real implementation, you'd download and extract the zip\nconst imageLinks=results.map(result=>result.link);setImages(imageLinks);setLoadingStatus('');setDebugInfo(prev=>prev+\"\\n\\u2705 Generation complete! Got \".concat(imageLinks.length,\" results\"));}else{setError('No results found');setDebugInfo(prev=>prev+'\\n❌ No results found');}}catch(err){console.error('Error generating images:',err);const errorMsg=err.message||'An error occurred while generating images.';setError(errorMsg);setDebugInfo(prev=>prev+\"\\n\\u274C Error: \".concat(errorMsg));}finally{setLoading(false);setLoadingStatus('');}};return/*#__PURE__*/_jsxs(\"div\",{className:\"image-generator\",children:[isUsingProxy&&/*#__PURE__*/_jsx(\"div\",{className:\"cors-warning\",children:/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"\\u26A0\\uFE0F Demo Mode:\"}),\" This app uses CORS proxies for demonstration purposes. If one proxy fails, it will automatically try others. For production use, ByteNite API should be configured to allow your domain.\"]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"prompt\",children:\"Prompt:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"prompt\",className:\"input-field\",placeholder:\"Enter your image description...\",value:prompt,onChange:e=>setPrompt(e.target.value)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"numReplicas\",children:\"Number of Images:\"}),/*#__PURE__*/_jsx(\"select\",{id:\"numReplicas\",className:\"select-field\",value:numReplicas,onChange:e=>setNumReplicas(Number(e.target.value)),children:[...Array(10)].map((_,index)=>/*#__PURE__*/_jsx(\"option\",{value:index+1,children:index+1},index+1))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"apiKey\",children:\"API Key:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",id:\"apiKey\",className:\"input-field\",placeholder:\"Enter your ByteNite API key...\",value:apiKey,onChange:e=>setApiKey(e.target.value)}),/*#__PURE__*/_jsx(\"small\",{className:\"api-key-hint\",children:\"Tip: Make sure to copy the entire API key without any extra spaces. API keys are usually long strings (50+ characters).\"})]}),/*#__PURE__*/_jsx(\"button\",{className:\"generate-button\",onClick:handleGenerate,disabled:loading,children:loading?'Generating...':'Generate Images'})]}),debugInfo&&/*#__PURE__*/_jsxs(\"div\",{className:\"debug-panel\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Debug Information:\"}),/*#__PURE__*/_jsx(\"pre\",{children:debugInfo})]}),loading&&/*#__PURE__*/_jsx(LoadingSpinner,{status:loadingStatus}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:error}),images.length>0&&/*#__PURE__*/_jsx(ImageGallery,{images:images})]});};export default ImageGenerator;","map":{"version":3,"names":["React","useState","fetchAccessToken","createJob","runJob","pollResults","LoadingSpinner","ImageGallery","jsx","_jsx","jsxs","_jsxs","ImageGenerator","prompt","setPrompt","numReplicas","setNumReplicas","apiKey","setApiKey","loading","setLoading","images","setImages","error","setError","loadingStatus","setLoadingStatus","debugInfo","setDebugInfo","isUsingProxy","window","location","hostname","handleGenerate","trim","concat","length","substring","prev","accessToken","jobData","jobId","job","id","results","imageLinks","map","result","link","err","console","errorMsg","message","className","children","htmlFor","type","placeholder","value","onChange","e","target","Number","Array","_","index","onClick","disabled","status"],"sources":["/Users/fabio/Coding/bytenite-git/pocs/sv-demo-night/src/components/ImageGenerator.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { fetchAccessToken, createJob, runJob, pollResults } from '../services/api';\nimport LoadingSpinner from './LoadingSpinner';\nimport ImageGallery from './ImageGallery';\n\nconst ImageGenerator: React.FC = () => {\n    const [prompt, setPrompt] = useState('');\n    const [numReplicas, setNumReplicas] = useState(1);\n    const [apiKey, setApiKey] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [images, setImages] = useState<string[]>([]);\n    const [error, setError] = useState<string | null>(null);\n    const [loadingStatus, setLoadingStatus] = useState('');\n    const [debugInfo, setDebugInfo] = useState<string>('');\n\n    // Check if we're using CORS proxy\n    const isUsingProxy = window.location.hostname === 'bytenite2.github.io';\n\n    const handleGenerate = async () => {\n        if (!prompt.trim()) {\n            setError('Please enter a prompt');\n            return;\n        }\n        if (!apiKey.trim()) {\n            setError('Please enter your API key');\n            return;\n        }\n\n        // Clear debug info and show API key info\n        setDebugInfo(`API Key info: Length=${apiKey.length}, Starts with: ${apiKey.substring(0, 8)}...`);\n\n        setLoading(true);\n        setError(null);\n        setImages([]);\n\n        try {\n            setLoadingStatus('Authenticating...');\n            setDebugInfo(prev => prev + '\\nAttempting authentication...');\n            const accessToken = await fetchAccessToken(apiKey);\n            setDebugInfo(prev => prev + '\\n✅ Authentication successful!');\n            \n            setLoadingStatus('Creating job...');\n            const jobData = await createJob(accessToken, prompt, numReplicas);\n            const jobId = jobData.job.id;\n            setDebugInfo(prev => prev + `\\n✅ Job created with ID: ${jobId}`);\n\n            setLoadingStatus('Starting generation...');\n            await runJob(accessToken, jobId);\n            setDebugInfo(prev => prev + '\\n✅ Job started successfully');\n            \n            setLoadingStatus('Generating images...');\n            const results = await pollResults(accessToken, jobId);\n\n            if (results && results.length > 0) {\n                // For now, we'll just use the download links directly\n                // In a real implementation, you'd download and extract the zip\n                const imageLinks = results.map((result: any) => result.link);\n                setImages(imageLinks);\n                setLoadingStatus('');\n                setDebugInfo(prev => prev + `\\n✅ Generation complete! Got ${imageLinks.length} results`);\n            } else {\n                setError('No results found');\n                setDebugInfo(prev => prev + '\\n❌ No results found');\n            }\n        } catch (err: any) {\n            console.error('Error generating images:', err);\n            const errorMsg = err.message || 'An error occurred while generating images.';\n            setError(errorMsg);\n            setDebugInfo(prev => prev + `\\n❌ Error: ${errorMsg}`);\n        } finally {\n            setLoading(false);\n            setLoadingStatus('');\n        }\n    };\n\n    return (\n        <div className=\"image-generator\">\n            {isUsingProxy && (\n                <div className=\"cors-warning\">\n                    <p><strong>⚠️ Demo Mode:</strong> This app uses CORS proxies for demonstration purposes. \n                    If one proxy fails, it will automatically try others. \n                    For production use, ByteNite API should be configured to allow your domain.</p>\n                </div>\n            )}\n            \n            <div className=\"form-container\">\n                <div className=\"input-group\">\n                    <label htmlFor=\"prompt\">Prompt:</label>\n                    <input\n                        type=\"text\"\n                        id=\"prompt\"\n                        className=\"input-field\"\n                        placeholder=\"Enter your image description...\"\n                        value={prompt}\n                        onChange={(e) => setPrompt(e.target.value)}\n                    />\n                </div>\n                \n                <div className=\"input-group\">\n                    <label htmlFor=\"numReplicas\">Number of Images:</label>\n                    <select\n                        id=\"numReplicas\"\n                        className=\"select-field\"\n                        value={numReplicas}\n                        onChange={(e) => setNumReplicas(Number(e.target.value))}\n                    >\n                        {[...Array(10)].map((_, index) => (\n                            <option key={index + 1} value={index + 1}>\n                                {index + 1}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n                \n                <div className=\"input-group\">\n                    <label htmlFor=\"apiKey\">API Key:</label>\n                    <input\n                        type=\"password\"\n                        id=\"apiKey\"\n                        className=\"input-field\"\n                        placeholder=\"Enter your ByteNite API key...\"\n                        value={apiKey}\n                        onChange={(e) => setApiKey(e.target.value)}\n                    />\n                    <small className=\"api-key-hint\">\n                        Tip: Make sure to copy the entire API key without any extra spaces.\n                        API keys are usually long strings (50+ characters).\n                    </small>\n                </div>\n                \n                <button \n                    className=\"generate-button\" \n                    onClick={handleGenerate}\n                    disabled={loading}\n                >\n                    {loading ? 'Generating...' : 'Generate Images'}\n                </button>\n            </div>\n\n            {debugInfo && (\n                <div className=\"debug-panel\">\n                    <h4>Debug Information:</h4>\n                    <pre>{debugInfo}</pre>\n                </div>\n            )}\n\n            {loading && <LoadingSpinner status={loadingStatus} />}\n            {error && <div className=\"error-message\">{error}</div>}\n            {images.length > 0 && <ImageGallery images={images} />}\n        </div>\n    );\n};\n\nexport default ImageGenerator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}