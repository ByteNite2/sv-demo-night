{"ast":null,"code":"import JSZip from'jszip';// CORS proxy for downloading files\nconst getCorsProxiedUrl=url=>{// Use the same proxy logic as API calls\nif(window.location.hostname==='bytenite2.github.io'){return\"https://thingproxy.freeboard.io/fetch/\".concat(url);}return url;};/**\n * Downloads a zip file and extracts image files from it\n * @param zipUrl - URL to the zip file\n * @returns Array of base64 data URLs for the images\n */export const downloadAndExtractImages=async zipUrl=>{try{console.log('Downloading zip file:',zipUrl);// Try to download with CORS proxy first, then direct\nlet response;try{response=await fetch(getCorsProxiedUrl(zipUrl));}catch(corsError){console.log('CORS proxy failed, trying direct download...');response=await fetch(zipUrl);}if(!response.ok){throw new Error(\"Failed to download zip file: \".concat(response.status,\" \").concat(response.statusText));}const zipBlob=await response.blob();console.log('Zip file downloaded, size:',zipBlob.size,'bytes');// Load the zip file\nconst zip=new JSZip();const loadedZip=await zip.loadAsync(zipBlob);const imageDataUrls=[];const imageExtensions=['.png','.jpg','.jpeg','.gif','.bmp','.webp'];// Extract image files\nfor(const[filename,file]of Object.entries(loadedZip.files)){// Skip directories\nif(file.dir)continue;// Check if it's an image file\nconst isImage=imageExtensions.some(ext=>filename.toLowerCase().endsWith(ext));if(isImage){console.log('Extracting image:',filename);try{// Get the file as blob\nconst imageBlob=await file.async('blob');// Convert to data URL\nconst dataUrl=await new Promise((resolve,reject)=>{const reader=new FileReader();reader.onload=()=>resolve(reader.result);reader.onerror=reject;reader.readAsDataURL(imageBlob);});imageDataUrls.push(dataUrl);}catch(error){console.error(\"Failed to extract \".concat(filename,\":\"),error);}}}console.log(\"Extracted \".concat(imageDataUrls.length,\" images from zip\"));return imageDataUrls;}catch(error){console.error('Error downloading/extracting zip:',error);throw error;}};/**\n * Downloads and extracts images from multiple zip files\n * @param zipUrls - Array of zip file URLs\n * @param onProgress - Progress callback function\n * @returns Array of base64 data URLs for all images\n */export const downloadAndExtractMultipleZips=async(zipUrls,onProgress)=>{const allImages=[];for(let i=0;i<zipUrls.length;i++){try{console.log(\"Processing zip file \".concat(i+1,\"/\").concat(zipUrls.length));if(onProgress){onProgress(i+1,zipUrls.length);}const images=await downloadAndExtractImages(zipUrls[i]);allImages.push(...images);}catch(error){console.error(\"Failed to process zip file \".concat(i+1,\":\"),error);// Continue with other zip files even if one fails\n}}return allImages;};","map":{"version":3,"names":["JSZip","getCorsProxiedUrl","url","window","location","hostname","concat","downloadAndExtractImages","zipUrl","console","log","response","fetch","corsError","ok","Error","status","statusText","zipBlob","blob","size","zip","loadedZip","loadAsync","imageDataUrls","imageExtensions","filename","file","Object","entries","files","dir","isImage","some","ext","toLowerCase","endsWith","imageBlob","async","dataUrl","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL","push","error","length","downloadAndExtractMultipleZips","zipUrls","onProgress","allImages","i","images"],"sources":["/Users/fabio/Coding/bytenite-git/pocs/sv-demo-night/src/services/zipUtils.ts"],"sourcesContent":["import JSZip from 'jszip';\n\n// CORS proxy for downloading files\nconst getCorsProxiedUrl = (url: string): string => {\n    // Use the same proxy logic as API calls\n    if (window.location.hostname === 'bytenite2.github.io') {\n        return `https://thingproxy.freeboard.io/fetch/${url}`;\n    }\n    return url;\n};\n\n/**\n * Downloads a zip file and extracts image files from it\n * @param zipUrl - URL to the zip file\n * @returns Array of base64 data URLs for the images\n */\nexport const downloadAndExtractImages = async (zipUrl: string): Promise<string[]> => {\n    try {\n        console.log('Downloading zip file:', zipUrl);\n        \n        // Try to download with CORS proxy first, then direct\n        let response: Response;\n        try {\n            response = await fetch(getCorsProxiedUrl(zipUrl));\n        } catch (corsError) {\n            console.log('CORS proxy failed, trying direct download...');\n            response = await fetch(zipUrl);\n        }\n        \n        if (!response.ok) {\n            throw new Error(`Failed to download zip file: ${response.status} ${response.statusText}`);\n        }\n        \n        const zipBlob = await response.blob();\n        console.log('Zip file downloaded, size:', zipBlob.size, 'bytes');\n        \n        // Load the zip file\n        const zip = new JSZip();\n        const loadedZip = await zip.loadAsync(zipBlob);\n        \n        const imageDataUrls: string[] = [];\n        const imageExtensions = ['.png', '.jpg', '.jpeg', '.gif', '.bmp', '.webp'];\n        \n        // Extract image files\n        for (const [filename, file] of Object.entries(loadedZip.files)) {\n            // Skip directories\n            if (file.dir) continue;\n            \n            // Check if it's an image file\n            const isImage = imageExtensions.some(ext => \n                filename.toLowerCase().endsWith(ext)\n            );\n            \n            if (isImage) {\n                console.log('Extracting image:', filename);\n                \n                try {\n                    // Get the file as blob\n                    const imageBlob = await file.async('blob');\n                    \n                    // Convert to data URL\n                    const dataUrl = await new Promise<string>((resolve, reject) => {\n                        const reader = new FileReader();\n                        reader.onload = () => resolve(reader.result as string);\n                        reader.onerror = reject;\n                        reader.readAsDataURL(imageBlob);\n                    });\n                    \n                    imageDataUrls.push(dataUrl);\n                } catch (error) {\n                    console.error(`Failed to extract ${filename}:`, error);\n                }\n            }\n        }\n        \n        console.log(`Extracted ${imageDataUrls.length} images from zip`);\n        return imageDataUrls;\n        \n    } catch (error) {\n        console.error('Error downloading/extracting zip:', error);\n        throw error;\n    }\n};\n\n/**\n * Downloads and extracts images from multiple zip files\n * @param zipUrls - Array of zip file URLs\n * @param onProgress - Progress callback function\n * @returns Array of base64 data URLs for all images\n */\nexport const downloadAndExtractMultipleZips = async (\n    zipUrls: string[], \n    onProgress?: (current: number, total: number) => void\n): Promise<string[]> => {\n    const allImages: string[] = [];\n    \n    for (let i = 0; i < zipUrls.length; i++) {\n        try {\n            console.log(`Processing zip file ${i + 1}/${zipUrls.length}`);\n            \n            if (onProgress) {\n                onProgress(i + 1, zipUrls.length);\n            }\n            \n            const images = await downloadAndExtractImages(zipUrls[i]);\n            allImages.push(...images);\n        } catch (error) {\n            console.error(`Failed to process zip file ${i + 1}:`, error);\n            // Continue with other zip files even if one fails\n        }\n    }\n    \n    return allImages;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}