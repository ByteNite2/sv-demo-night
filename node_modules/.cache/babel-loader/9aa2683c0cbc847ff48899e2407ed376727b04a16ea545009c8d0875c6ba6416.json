{"ast":null,"code":"import axios from'axios';const BASE_URL='https://api.bytenite.com/v1';// Multiple CORS proxy options\nconst CORS_PROXIES=['https://api.allorigins.win/raw?url=','https://thingproxy.freeboard.io/fetch/','https://proxy.cors.sh/','https://cors-anywhere.herokuapp.com/'];let currentProxyIndex=0;// For demo purposes, we'll use a CORS proxy\n// In production, the ByteNite API should be configured to allow your domain\nconst getProxiedUrl=url=>{// Only use proxy if we're in production (GitHub Pages)\nif(window.location.hostname==='bytenite2.github.io'){const proxy=CORS_PROXIES[currentProxyIndex];return\"\".concat(proxy).concat(encodeURIComponent(url));}return url;};const tryNextProxy=()=>{currentProxyIndex=(currentProxyIndex+1)%CORS_PROXIES.length;};export const fetchAccessToken=async apiKey=>{var _lastError$response,_lastError$response$d,_lastError$response2;const maxRetries=CORS_PROXIES.length;let lastError;// Clean and validate API key\nconst cleanApiKey=apiKey.trim();if(!cleanApiKey){throw new Error('API key is required');}console.log('Attempting authentication with API key length:',cleanApiKey.length);console.log('API key starts with:',cleanApiKey.substring(0,8)+'...');for(let attempt=0;attempt<maxRetries;attempt++){try{console.log(\"Attempt \".concat(attempt+1,\" using proxy: \").concat(CORS_PROXIES[currentProxyIndex]));const requestPayload={apiKey:cleanApiKey};console.log('Request payload:',requestPayload);const response=await axios.post(getProxiedUrl(\"\".concat(BASE_URL,\"/auth/access_token\")),requestPayload,{headers:{'Content-Type':'application/json','Accept':'application/json'},timeout:10000// 10 second timeout\n});console.log('Authentication successful!');return response.data.token;}catch(error){var _error$response,_error$response2,_error$response3;console.error(\"Auth error with proxy \".concat(CORS_PROXIES[currentProxyIndex],\":\"),{status:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,statusText:(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.statusText,data:(_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.data,message:error.message});lastError=error;// If this isn't the last attempt, try next proxy\nif(attempt<maxRetries-1){tryNextProxy();console.log(\"Trying next proxy: \".concat(CORS_PROXIES[currentProxyIndex]));continue;}}}// If all proxies failed, throw the last error with more details\nconst errorMessage=((_lastError$response=lastError.response)===null||_lastError$response===void 0?void 0:(_lastError$response$d=_lastError$response.data)===null||_lastError$response$d===void 0?void 0:_lastError$response$d.message)||lastError.message;const errorDetails=((_lastError$response2=lastError.response)===null||_lastError$response2===void 0?void 0:_lastError$response2.data)||{};throw new Error(\"Authentication failed with all CORS proxies. Error: \".concat(errorMessage,\". Details: \").concat(JSON.stringify(errorDetails)));};export const createJob=async(accessToken,prompt,numReplicas)=>{try{const response=await axios.post(getProxiedUrl(\"\".concat(BASE_URL,\"/customer/jobs\")),{templateId:\"img-gen-diffusers-flux-gpu-template\",description:\"This job generates variations of images out of the same prompt using Flux Schnell.\",name:\"Job with img-gen-diffusers-flux-gpu-template\",params:{partitioner:{num_replicas:numReplicas},assembler:{},app:{prompt:prompt}}},{headers:{'Content-Type':'application/json','Accept':'application/json','Authorization':accessToken},timeout:15000// 15 second timeout\n});return response.data;}catch(error){var _error$response4,_error$response4$data;console.error('Job creation error:',error);throw new Error(\"Job creation failed: \".concat(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||error.message));}};export const runJob=async(accessToken,jobId)=>{try{await axios.post(getProxiedUrl(\"\".concat(BASE_URL,\"/customer/jobs/\").concat(jobId,\"/run\")),{config:{taskTimeout:\"3600\",jobTimeout:\"84200\",isTestJob:false}},{headers:{'Content-Type':'application/json','Accept':'application/json','Authorization':accessToken},timeout:15000// 15 second timeout\n});// Wait 1 second before polling as specified in requirements\nawait new Promise(resolve=>setTimeout(resolve,1000));}catch(error){var _error$response5,_error$response5$data;console.error('Job run error:',error);throw new Error(\"Job execution failed: \".concat(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||error.message));}};export const pollResults=async(accessToken,jobId)=>{const maxAttempts=120;// 2 minutes max polling\nlet attempts=0;while(attempts<maxAttempts){try{const response=await axios.get(getProxiedUrl(\"\".concat(BASE_URL,\"/customer/jobs/\").concat(jobId,\"/results\")),{headers:{'Accept':'application/json','Authorization':accessToken},timeout:10000// 10 second timeout\n});if(response.data.results&&response.data.results.length>0){return response.data.results;}}catch(error){var _error$response6;console.error(\"Polling attempt \".concat(attempts+1,\" failed:\"),error);// If it's a 404 or similar, the job might not be ready yet\nif(((_error$response6=error.response)===null||_error$response6===void 0?void 0:_error$response6.status)!==404){var _error$response7,_error$response7$data;throw new Error(\"Polling failed: \".concat(((_error$response7=error.response)===null||_error$response7===void 0?void 0:(_error$response7$data=_error$response7.data)===null||_error$response7$data===void 0?void 0:_error$response7$data.message)||error.message));}}// Wait 1 second before next poll\nawait new Promise(resolve=>setTimeout(resolve,1000));attempts++;}throw new Error('Job results not available after polling timeout');};","map":{"version":3,"names":["axios","BASE_URL","CORS_PROXIES","currentProxyIndex","getProxiedUrl","url","window","location","hostname","proxy","concat","encodeURIComponent","tryNextProxy","length","fetchAccessToken","apiKey","_lastError$response","_lastError$response$d","_lastError$response2","maxRetries","lastError","cleanApiKey","trim","Error","console","log","substring","attempt","requestPayload","response","post","headers","timeout","data","token","error","_error$response","_error$response2","_error$response3","status","statusText","message","errorMessage","errorDetails","JSON","stringify","createJob","accessToken","prompt","numReplicas","templateId","description","name","params","partitioner","num_replicas","assembler","app","_error$response4","_error$response4$data","runJob","jobId","config","taskTimeout","jobTimeout","isTestJob","Promise","resolve","setTimeout","_error$response5","_error$response5$data","pollResults","maxAttempts","attempts","get","results","_error$response6","_error$response7","_error$response7$data"],"sources":["/Users/fabio/Coding/bytenite-git/pocs/sv-demo-night/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { AccessTokenResponse, CreateJobResponse, JobResultsResponse } from '../types';\n\nconst BASE_URL = 'https://api.bytenite.com/v1';\n\n// Multiple CORS proxy options\nconst CORS_PROXIES = [\n    'https://api.allorigins.win/raw?url=',\n    'https://thingproxy.freeboard.io/fetch/',\n    'https://proxy.cors.sh/',\n    'https://cors-anywhere.herokuapp.com/'\n];\n\nlet currentProxyIndex = 0;\n\n// For demo purposes, we'll use a CORS proxy\n// In production, the ByteNite API should be configured to allow your domain\nconst getProxiedUrl = (url: string) => {\n    // Only use proxy if we're in production (GitHub Pages)\n    if (window.location.hostname === 'bytenite2.github.io') {\n        const proxy = CORS_PROXIES[currentProxyIndex];\n        return `${proxy}${encodeURIComponent(url)}`;\n    }\n    return url;\n};\n\nconst tryNextProxy = () => {\n    currentProxyIndex = (currentProxyIndex + 1) % CORS_PROXIES.length;\n};\n\nexport const fetchAccessToken = async (apiKey: string): Promise<string> => {\n    const maxRetries = CORS_PROXIES.length;\n    let lastError: any;\n\n    // Clean and validate API key\n    const cleanApiKey = apiKey.trim();\n    if (!cleanApiKey) {\n        throw new Error('API key is required');\n    }\n\n    console.log('Attempting authentication with API key length:', cleanApiKey.length);\n    console.log('API key starts with:', cleanApiKey.substring(0, 8) + '...');\n\n    for (let attempt = 0; attempt < maxRetries; attempt++) {\n        try {\n            console.log(`Attempt ${attempt + 1} using proxy: ${CORS_PROXIES[currentProxyIndex]}`);\n            \n            const requestPayload = { apiKey: cleanApiKey };\n            console.log('Request payload:', requestPayload);\n            \n            const response = await axios.post<AccessTokenResponse>(\n                getProxiedUrl(`${BASE_URL}/auth/access_token`), \n                requestPayload,\n                {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    },\n                    timeout: 10000 // 10 second timeout\n                }\n            );\n            \n            console.log('Authentication successful!');\n            return response.data.token;\n        } catch (error: any) {\n            console.error(`Auth error with proxy ${CORS_PROXIES[currentProxyIndex]}:`, {\n                status: error.response?.status,\n                statusText: error.response?.statusText,\n                data: error.response?.data,\n                message: error.message\n            });\n            lastError = error;\n            \n            // If this isn't the last attempt, try next proxy\n            if (attempt < maxRetries - 1) {\n                tryNextProxy();\n                console.log(`Trying next proxy: ${CORS_PROXIES[currentProxyIndex]}`);\n                continue;\n            }\n        }\n    }\n    \n    // If all proxies failed, throw the last error with more details\n    const errorMessage = lastError.response?.data?.message || lastError.message;\n    const errorDetails = lastError.response?.data || {};\n    throw new Error(`Authentication failed with all CORS proxies. Error: ${errorMessage}. Details: ${JSON.stringify(errorDetails)}`);\n};\n\nexport const createJob = async (accessToken: string, prompt: string, numReplicas: number): Promise<CreateJobResponse> => {\n    try {\n        const response = await axios.post<CreateJobResponse>(\n            getProxiedUrl(`${BASE_URL}/customer/jobs`), \n            {\n                templateId: \"img-gen-diffusers-flux-gpu-template\",\n                description: \"This job generates variations of images out of the same prompt using Flux Schnell.\",\n                name: \"Job with img-gen-diffusers-flux-gpu-template\",\n                params: {\n                    partitioner: {\n                        num_replicas: numReplicas\n                    },\n                    assembler: {},\n                    app: {\n                        prompt: prompt\n                    }\n                }\n            }, \n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                    'Authorization': accessToken\n                },\n                timeout: 15000 // 15 second timeout\n            }\n        );\n        return response.data;\n    } catch (error: any) {\n        console.error('Job creation error:', error);\n        throw new Error(`Job creation failed: ${error.response?.data?.message || error.message}`);\n    }\n};\n\nexport const runJob = async (accessToken: string, jobId: string): Promise<void> => {\n    try {\n        await axios.post(\n            getProxiedUrl(`${BASE_URL}/customer/jobs/${jobId}/run`), \n            {\n                config: {\n                    taskTimeout: \"3600\",\n                    jobTimeout: \"84200\",\n                    isTestJob: false\n                }\n            }, \n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                    'Authorization': accessToken\n                },\n                timeout: 15000 // 15 second timeout\n            }\n        );\n        \n        // Wait 1 second before polling as specified in requirements\n        await new Promise(resolve => setTimeout(resolve, 1000));\n    } catch (error: any) {\n        console.error('Job run error:', error);\n        throw new Error(`Job execution failed: ${error.response?.data?.message || error.message}`);\n    }\n};\n\nexport const pollResults = async (accessToken: string, jobId: string): Promise<JobResultsResponse['results']> => {\n    const maxAttempts = 120; // 2 minutes max polling\n    let attempts = 0;\n\n    while (attempts < maxAttempts) {\n        try {\n            const response = await axios.get<JobResultsResponse>(\n                getProxiedUrl(`${BASE_URL}/customer/jobs/${jobId}/results`), \n                {\n                    headers: {\n                        'Accept': 'application/json',\n                        'Authorization': accessToken\n                    },\n                    timeout: 10000 // 10 second timeout\n                }\n            );\n            \n            if (response.data.results && response.data.results.length > 0) {\n                return response.data.results;\n            }\n        } catch (error: any) {\n            console.error(`Polling attempt ${attempts + 1} failed:`, error);\n            // If it's a 404 or similar, the job might not be ready yet\n            if (error.response?.status !== 404) {\n                throw new Error(`Polling failed: ${error.response?.data?.message || error.message}`);\n            }\n        }\n        \n        // Wait 1 second before next poll\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        attempts++;\n    }\n    \n    throw new Error('Job results not available after polling timeout');\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}