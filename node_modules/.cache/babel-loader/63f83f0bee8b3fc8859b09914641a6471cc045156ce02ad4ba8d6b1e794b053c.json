{"ast":null,"code":"import React,{useState}from'react';import{fetchAccessToken,createJob,runJob,pollResults}from'../services/api';import LoadingSpinner from'./LoadingSpinner';import ImageGallery from'./ImageGallery';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ImageGenerator=()=>{const[prompt,setPrompt]=useState('');const[numReplicas,setNumReplicas]=useState(1);const[apiKey,setApiKey]=useState('');const[loading,setLoading]=useState(false);const[images,setImages]=useState([]);const[error,setError]=useState(null);const[loadingStatus,setLoadingStatus]=useState('');const handleGenerate=async()=>{if(!prompt.trim()){setError('Please enter a prompt');return;}if(!apiKey.trim()){setError('Please enter your API key');return;}setLoading(true);setError(null);setImages([]);try{setLoadingStatus('Authenticating...');const accessToken=await fetchAccessToken(apiKey);setLoadingStatus('Creating job...');const jobData=await createJob(accessToken,prompt,numReplicas);const jobId=jobData.job.id;setLoadingStatus('Starting generation...');await runJob(accessToken,jobId);setLoadingStatus('Generating images...');const results=await pollResults(accessToken,jobId);if(results&&results.length>0){// For now, we'll just use the download links directly\n// In a real implementation, you'd download and extract the zip\nconst imageLinks=results.map(result=>result.link);setImages(imageLinks);setLoadingStatus('');}else{setError('No results found');}}catch(err){var _err$response,_err$response$data;console.error('Error generating images:',err);setError(((_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:_err$response$data.message)||'An error occurred while generating images.');}finally{setLoading(false);setLoadingStatus('');}};return/*#__PURE__*/_jsxs(\"div\",{className:\"image-generator\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"prompt\",children:\"Prompt:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"prompt\",className:\"input-field\",placeholder:\"Enter your image description...\",value:prompt,onChange:e=>setPrompt(e.target.value)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"numReplicas\",children:\"Number of Images:\"}),/*#__PURE__*/_jsx(\"select\",{id:\"numReplicas\",className:\"select-field\",value:numReplicas,onChange:e=>setNumReplicas(Number(e.target.value)),children:[...Array(10)].map((_,index)=>/*#__PURE__*/_jsx(\"option\",{value:index+1,children:index+1},index+1))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"apiKey\",children:\"API Key:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",id:\"apiKey\",className:\"input-field\",placeholder:\"Enter your ByteNite API key...\",value:apiKey,onChange:e=>setApiKey(e.target.value)})]}),/*#__PURE__*/_jsx(\"button\",{className:\"generate-button\",onClick:handleGenerate,disabled:loading,children:loading?'Generating...':'Generate Images'})]}),loading&&/*#__PURE__*/_jsx(LoadingSpinner,{status:loadingStatus}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:error}),images.length>0&&/*#__PURE__*/_jsx(ImageGallery,{images:images})]});};export default ImageGenerator;","map":{"version":3,"names":["React","useState","fetchAccessToken","createJob","runJob","pollResults","LoadingSpinner","ImageGallery","jsx","_jsx","jsxs","_jsxs","ImageGenerator","prompt","setPrompt","numReplicas","setNumReplicas","apiKey","setApiKey","loading","setLoading","images","setImages","error","setError","loadingStatus","setLoadingStatus","handleGenerate","trim","accessToken","jobData","jobId","job","id","results","length","imageLinks","map","result","link","err","_err$response","_err$response$data","console","response","data","message","className","children","htmlFor","type","placeholder","value","onChange","e","target","Number","Array","_","index","onClick","disabled","status"],"sources":["/Users/fabio/Coding/bytenite-git/pocs/sv-demo-night/src/components/ImageGenerator.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { fetchAccessToken, createJob, runJob, pollResults } from '../services/api';\nimport LoadingSpinner from './LoadingSpinner';\nimport ImageGallery from './ImageGallery';\n\nconst ImageGenerator: React.FC = () => {\n    const [prompt, setPrompt] = useState('');\n    const [numReplicas, setNumReplicas] = useState(1);\n    const [apiKey, setApiKey] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [images, setImages] = useState<string[]>([]);\n    const [error, setError] = useState<string | null>(null);\n    const [loadingStatus, setLoadingStatus] = useState('');\n\n    const handleGenerate = async () => {\n        if (!prompt.trim()) {\n            setError('Please enter a prompt');\n            return;\n        }\n        if (!apiKey.trim()) {\n            setError('Please enter your API key');\n            return;\n        }\n\n        setLoading(true);\n        setError(null);\n        setImages([]);\n\n        try {\n            setLoadingStatus('Authenticating...');\n            const accessToken = await fetchAccessToken(apiKey);\n            \n            setLoadingStatus('Creating job...');\n            const jobData = await createJob(accessToken, prompt, numReplicas);\n            const jobId = jobData.job.id;\n\n            setLoadingStatus('Starting generation...');\n            await runJob(accessToken, jobId);\n            \n            setLoadingStatus('Generating images...');\n            const results = await pollResults(accessToken, jobId);\n\n            if (results && results.length > 0) {\n                // For now, we'll just use the download links directly\n                // In a real implementation, you'd download and extract the zip\n                const imageLinks = results.map((result: any) => result.link);\n                setImages(imageLinks);\n                setLoadingStatus('');\n            } else {\n                setError('No results found');\n            }\n        } catch (err: any) {\n            console.error('Error generating images:', err);\n            setError(err.response?.data?.message || 'An error occurred while generating images.');\n        } finally {\n            setLoading(false);\n            setLoadingStatus('');\n        }\n    };\n\n    return (\n        <div className=\"image-generator\">\n            <div className=\"form-container\">\n                <div className=\"input-group\">\n                    <label htmlFor=\"prompt\">Prompt:</label>\n                    <input\n                        type=\"text\"\n                        id=\"prompt\"\n                        className=\"input-field\"\n                        placeholder=\"Enter your image description...\"\n                        value={prompt}\n                        onChange={(e) => setPrompt(e.target.value)}\n                    />\n                </div>\n                \n                <div className=\"input-group\">\n                    <label htmlFor=\"numReplicas\">Number of Images:</label>\n                    <select\n                        id=\"numReplicas\"\n                        className=\"select-field\"\n                        value={numReplicas}\n                        onChange={(e) => setNumReplicas(Number(e.target.value))}\n                    >\n                        {[...Array(10)].map((_, index) => (\n                            <option key={index + 1} value={index + 1}>\n                                {index + 1}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n                \n                <div className=\"input-group\">\n                    <label htmlFor=\"apiKey\">API Key:</label>\n                    <input\n                        type=\"password\"\n                        id=\"apiKey\"\n                        className=\"input-field\"\n                        placeholder=\"Enter your ByteNite API key...\"\n                        value={apiKey}\n                        onChange={(e) => setApiKey(e.target.value)}\n                    />\n                </div>\n                \n                <button \n                    className=\"generate-button\" \n                    onClick={handleGenerate}\n                    disabled={loading}\n                >\n                    {loading ? 'Generating...' : 'Generate Images'}\n                </button>\n            </div>\n\n            {loading && <LoadingSpinner status={loadingStatus} />}\n            {error && <div className=\"error-message\">{error}</div>}\n            {images.length > 0 && <ImageGallery images={images} />}\n        </div>\n    );\n};\n\nexport default ImageGenerator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}