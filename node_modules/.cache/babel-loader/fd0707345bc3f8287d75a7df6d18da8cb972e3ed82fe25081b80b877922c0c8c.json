{"ast":null,"code":"import axios from'axios';const BASE_URL='https://api.bytenite.com/v1';// Multiple CORS proxy options\nconst CORS_PROXIES=[{url:'https://thingproxy.freeboard.io/fetch/',needsEncoding:false},{url:'https://proxy.cors.sh/',needsEncoding:false},{url:'https://cors-anywhere.herokuapp.com/',needsEncoding:false},{url:'',needsEncoding:false}// Direct attempt as last resort\n];let currentProxyIndex=0;// For demo purposes, we'll use a CORS proxy\n// In production, the ByteNite API should be configured to allow your domain\nconst getProxiedUrl=url=>{// Only use proxy if we're in production (GitHub Pages)\nif(window.location.hostname==='bytenite2.github.io'){const proxy=CORS_PROXIES[currentProxyIndex];if(proxy.url===''){// Direct attempt\nreturn url;}return\"\".concat(proxy.url).concat(proxy.needsEncoding?encodeURIComponent(url):url);}return url;};const tryNextProxy=()=>{currentProxyIndex=(currentProxyIndex+1)%CORS_PROXIES.length;};export const fetchAccessToken=async apiKey=>{var _lastError$response,_lastError$response$d,_lastError$response2;const maxRetries=CORS_PROXIES.length;let lastError;// Clean and validate API key\nconst cleanApiKey=apiKey.trim();if(!cleanApiKey){throw new Error('API key is required');}console.log('Attempting authentication with API key length:',cleanApiKey.length);console.log('API key starts with:',cleanApiKey.substring(0,8)+'...');for(let attempt=0;attempt<maxRetries;attempt++){try{const currentProxy=CORS_PROXIES[currentProxyIndex];const proxyName=currentProxy.url===''?'Direct':currentProxy.url;console.log(\"Attempt \".concat(attempt+1,\" using proxy: \").concat(proxyName));const requestPayload={apiKey:cleanApiKey};console.log('Request payload:',requestPayload);const requestConfig={headers:{'Content-Type':'application/json','Accept':'application/json'},timeout:15000// 15 second timeout\n};// For direct requests, add additional headers that might help\nif(currentProxy.url===''){requestConfig.headers['Access-Control-Allow-Origin']='*';requestConfig.headers['Access-Control-Allow-Methods']='GET, POST, PUT, DELETE, OPTIONS';requestConfig.headers['Access-Control-Allow-Headers']='Content-Type, Authorization, Accept';}const response=await axios.post(getProxiedUrl(\"\".concat(BASE_URL,\"/auth/access_token\")),requestPayload,requestConfig);console.log('Authentication successful!');return response.data.token;}catch(error){var _error$response,_error$response2,_error$response3;const currentProxy=CORS_PROXIES[currentProxyIndex];const proxyName=currentProxy.url===''?'Direct':currentProxy.url;console.error(\"Auth error with proxy \".concat(proxyName,\":\"),{status:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,statusText:(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.statusText,data:(_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.data,message:error.message});lastError=error;// If this isn't the last attempt, try next proxy\nif(attempt<maxRetries-1){tryNextProxy();const nextProxy=CORS_PROXIES[currentProxyIndex];const nextProxyName=nextProxy.url===''?'Direct':nextProxy.url;console.log(\"Trying next proxy: \".concat(nextProxyName));continue;}}}// If all proxies failed, throw the last error with more details\nconst errorMessage=((_lastError$response=lastError.response)===null||_lastError$response===void 0?void 0:(_lastError$response$d=_lastError$response.data)===null||_lastError$response$d===void 0?void 0:_lastError$response$d.message)||lastError.message;const errorDetails=((_lastError$response2=lastError.response)===null||_lastError$response2===void 0?void 0:_lastError$response2.data)||{};throw new Error(\"Authentication failed with all CORS proxies. Error: \".concat(errorMessage,\". Details: \").concat(JSON.stringify(errorDetails)));};export const createJob=async(accessToken,prompt,numReplicas)=>{try{const response=await axios.post(getProxiedUrl(\"\".concat(BASE_URL,\"/customer/jobs\")),{templateId:\"img-gen-diffusers-flux-gpu-template\",description:\"This job generates variations of images out of the same prompt using Flux Schnell.\",name:\"Job with img-gen-diffusers-flux-gpu-template\",params:{partitioner:{num_replicas:numReplicas},assembler:{},app:{prompt:prompt}}},{headers:{'Content-Type':'application/json','Accept':'application/json','Authorization':accessToken},timeout:15000// 15 second timeout\n});return response.data;}catch(error){var _error$response4,_error$response4$data;console.error('Job creation error:',error);throw new Error(\"Job creation failed: \".concat(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||error.message));}};export const runJob=async(accessToken,jobId)=>{try{await axios.post(getProxiedUrl(\"\".concat(BASE_URL,\"/customer/jobs/\").concat(jobId,\"/run\")),{config:{taskTimeout:\"3600\",jobTimeout:\"84200\",isTestJob:false}},{headers:{'Content-Type':'application/json','Accept':'application/json','Authorization':accessToken},timeout:15000// 15 second timeout\n});// Wait 1 second before polling as specified in requirements\nawait new Promise(resolve=>setTimeout(resolve,1000));}catch(error){var _error$response5,_error$response5$data;console.error('Job run error:',error);throw new Error(\"Job execution failed: \".concat(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||error.message));}};export const pollResults=async(accessToken,jobId)=>{const maxAttempts=120;// 2 minutes max polling\nlet attempts=0;while(attempts<maxAttempts){try{const response=await axios.get(getProxiedUrl(\"\".concat(BASE_URL,\"/customer/jobs/\").concat(jobId,\"/results\")),{headers:{'Accept':'application/json','Authorization':accessToken},timeout:10000// 10 second timeout\n});if(response.data.results&&response.data.results.length>0){return response.data.results;}}catch(error){var _error$response6;console.error(\"Polling attempt \".concat(attempts+1,\" failed:\"),error);// If it's a 404 or similar, the job might not be ready yet\nif(((_error$response6=error.response)===null||_error$response6===void 0?void 0:_error$response6.status)!==404){var _error$response7,_error$response7$data;throw new Error(\"Polling failed: \".concat(((_error$response7=error.response)===null||_error$response7===void 0?void 0:(_error$response7$data=_error$response7.data)===null||_error$response7$data===void 0?void 0:_error$response7$data.message)||error.message));}}// Wait 1 second before next poll\nawait new Promise(resolve=>setTimeout(resolve,1000));attempts++;}throw new Error('Job results not available after polling timeout');};","map":{"version":3,"names":["axios","BASE_URL","CORS_PROXIES","url","needsEncoding","currentProxyIndex","getProxiedUrl","window","location","hostname","proxy","concat","encodeURIComponent","tryNextProxy","length","fetchAccessToken","apiKey","_lastError$response","_lastError$response$d","_lastError$response2","maxRetries","lastError","cleanApiKey","trim","Error","console","log","substring","attempt","currentProxy","proxyName","requestPayload","requestConfig","headers","timeout","response","post","data","token","error","_error$response","_error$response2","_error$response3","status","statusText","message","nextProxy","nextProxyName","errorMessage","errorDetails","JSON","stringify","createJob","accessToken","prompt","numReplicas","templateId","description","name","params","partitioner","num_replicas","assembler","app","_error$response4","_error$response4$data","runJob","jobId","config","taskTimeout","jobTimeout","isTestJob","Promise","resolve","setTimeout","_error$response5","_error$response5$data","pollResults","maxAttempts","attempts","get","results","_error$response6","_error$response7","_error$response7$data"],"sources":["/Users/fabio/Coding/bytenite-git/pocs/sv-demo-night/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { AccessTokenResponse, CreateJobResponse, JobResultsResponse } from '../types';\n\nconst BASE_URL = 'https://api.bytenite.com/v1';\n\n// Multiple CORS proxy options\nconst CORS_PROXIES = [\n    { url: 'https://thingproxy.freeboard.io/fetch/', needsEncoding: false },\n    { url: 'https://proxy.cors.sh/', needsEncoding: false },\n    { url: 'https://cors-anywhere.herokuapp.com/', needsEncoding: false },\n    { url: '', needsEncoding: false } // Direct attempt as last resort\n];\n\nlet currentProxyIndex = 0;\n\n// For demo purposes, we'll use a CORS proxy\n// In production, the ByteNite API should be configured to allow your domain\nconst getProxiedUrl = (url: string) => {\n    // Only use proxy if we're in production (GitHub Pages)\n    if (window.location.hostname === 'bytenite2.github.io') {\n        const proxy = CORS_PROXIES[currentProxyIndex];\n        if (proxy.url === '') {\n            // Direct attempt\n            return url;\n        }\n        return `${proxy.url}${proxy.needsEncoding ? encodeURIComponent(url) : url}`;\n    }\n    return url;\n};\n\nconst tryNextProxy = () => {\n    currentProxyIndex = (currentProxyIndex + 1) % CORS_PROXIES.length;\n};\n\nexport const fetchAccessToken = async (apiKey: string): Promise<string> => {\n    const maxRetries = CORS_PROXIES.length;\n    let lastError: any;\n\n    // Clean and validate API key\n    const cleanApiKey = apiKey.trim();\n    if (!cleanApiKey) {\n        throw new Error('API key is required');\n    }\n\n    console.log('Attempting authentication with API key length:', cleanApiKey.length);\n    console.log('API key starts with:', cleanApiKey.substring(0, 8) + '...');\n\n    for (let attempt = 0; attempt < maxRetries; attempt++) {\n        try {\n            const currentProxy = CORS_PROXIES[currentProxyIndex];\n            const proxyName = currentProxy.url === '' ? 'Direct' : currentProxy.url;\n            console.log(`Attempt ${attempt + 1} using proxy: ${proxyName}`);\n            \n            const requestPayload = { apiKey: cleanApiKey };\n            console.log('Request payload:', requestPayload);\n            \n            const requestConfig: any = {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                },\n                timeout: 15000 // 15 second timeout\n            };\n\n            // For direct requests, add additional headers that might help\n            if (currentProxy.url === '') {\n                requestConfig.headers['Access-Control-Allow-Origin'] = '*';\n                requestConfig.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS';\n                requestConfig.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization, Accept';\n            }\n            \n            const response = await axios.post<AccessTokenResponse>(\n                getProxiedUrl(`${BASE_URL}/auth/access_token`), \n                requestPayload,\n                requestConfig\n            );\n            \n            console.log('Authentication successful!');\n            return response.data.token;\n        } catch (error: any) {\n            const currentProxy = CORS_PROXIES[currentProxyIndex];\n            const proxyName = currentProxy.url === '' ? 'Direct' : currentProxy.url;\n            console.error(`Auth error with proxy ${proxyName}:`, {\n                status: error.response?.status,\n                statusText: error.response?.statusText,\n                data: error.response?.data,\n                message: error.message\n            });\n            lastError = error;\n            \n            // If this isn't the last attempt, try next proxy\n            if (attempt < maxRetries - 1) {\n                tryNextProxy();\n                const nextProxy = CORS_PROXIES[currentProxyIndex];\n                const nextProxyName = nextProxy.url === '' ? 'Direct' : nextProxy.url;\n                console.log(`Trying next proxy: ${nextProxyName}`);\n                continue;\n            }\n        }\n    }\n    \n    // If all proxies failed, throw the last error with more details\n    const errorMessage = lastError.response?.data?.message || lastError.message;\n    const errorDetails = lastError.response?.data || {};\n    throw new Error(`Authentication failed with all CORS proxies. Error: ${errorMessage}. Details: ${JSON.stringify(errorDetails)}`);\n};\n\nexport const createJob = async (accessToken: string, prompt: string, numReplicas: number): Promise<CreateJobResponse> => {\n    try {\n        const response = await axios.post<CreateJobResponse>(\n            getProxiedUrl(`${BASE_URL}/customer/jobs`), \n            {\n                templateId: \"img-gen-diffusers-flux-gpu-template\",\n                description: \"This job generates variations of images out of the same prompt using Flux Schnell.\",\n                name: \"Job with img-gen-diffusers-flux-gpu-template\",\n                params: {\n                    partitioner: {\n                        num_replicas: numReplicas\n                    },\n                    assembler: {},\n                    app: {\n                        prompt: prompt\n                    }\n                }\n            }, \n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                    'Authorization': accessToken\n                },\n                timeout: 15000 // 15 second timeout\n            }\n        );\n        return response.data;\n    } catch (error: any) {\n        console.error('Job creation error:', error);\n        throw new Error(`Job creation failed: ${error.response?.data?.message || error.message}`);\n    }\n};\n\nexport const runJob = async (accessToken: string, jobId: string): Promise<void> => {\n    try {\n        await axios.post(\n            getProxiedUrl(`${BASE_URL}/customer/jobs/${jobId}/run`), \n            {\n                config: {\n                    taskTimeout: \"3600\",\n                    jobTimeout: \"84200\",\n                    isTestJob: false\n                }\n            }, \n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                    'Authorization': accessToken\n                },\n                timeout: 15000 // 15 second timeout\n            }\n        );\n        \n        // Wait 1 second before polling as specified in requirements\n        await new Promise(resolve => setTimeout(resolve, 1000));\n    } catch (error: any) {\n        console.error('Job run error:', error);\n        throw new Error(`Job execution failed: ${error.response?.data?.message || error.message}`);\n    }\n};\n\nexport const pollResults = async (accessToken: string, jobId: string): Promise<JobResultsResponse['results']> => {\n    const maxAttempts = 120; // 2 minutes max polling\n    let attempts = 0;\n\n    while (attempts < maxAttempts) {\n        try {\n            const response = await axios.get<JobResultsResponse>(\n                getProxiedUrl(`${BASE_URL}/customer/jobs/${jobId}/results`), \n                {\n                    headers: {\n                        'Accept': 'application/json',\n                        'Authorization': accessToken\n                    },\n                    timeout: 10000 // 10 second timeout\n                }\n            );\n            \n            if (response.data.results && response.data.results.length > 0) {\n                return response.data.results;\n            }\n        } catch (error: any) {\n            console.error(`Polling attempt ${attempts + 1} failed:`, error);\n            // If it's a 404 or similar, the job might not be ready yet\n            if (error.response?.status !== 404) {\n                throw new Error(`Polling failed: ${error.response?.data?.message || error.message}`);\n            }\n        }\n        \n        // Wait 1 second before next poll\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        attempts++;\n    }\n    \n    throw new Error('Job results not available after polling timeout');\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}